[
["index.html", "EngleLab: Data Preparation Introduction", " EngleLab: Data Preparation Jason Tsukahara Introduction At some point you will need to start analyzing the data. However, you first need to prepare the data so that it is ready to analyze. There are several steps in this processs and it can be quite tedious. There are two scenarios in which you may need to start processing and analyzing data: Before data collection has finished After data collection has finished For both of these scenarios, there are 4 data preparation steps: Organize the raw data files. This involves moving the raw .edat files from Tasks/Session #/#. Task/data to Data Files/edat/Task/. Merge the individual .edat files into a single task.emrg file using E-Merge Export the task.emrg file to a task.txt file so we can process the data in R Source the 0_task_raw.R Scripts After performing the 4 data preparation steps you will have tidy raw data files for each task saved as task_raw.csv in the Data Files folder. It is these files that you can then copy over to a Data Analysis repository. To understand more about Project Organization and the different types of repositories, see Chapter 7 in the UseR Guide. "],
["organize-raw-files.html", "1 Organize Raw Files 1.1 Before Finishing Data Collection 1.2 After Data Collection", " 1 Organize Raw Files The Four Data Preparation Steps Organize the raw data files. This involves moving the raw .edat files from Tasks/Session #/#. Task/data to Data Files/edat/Task/. Merge the individual .edat files into a single task.emrg file using E-Merge Export the task.emrg file to a task.txt file so we can process the data in R Source the 0_task_raw.R Scripts The first step in data preparation is just about organizing the raw data files so that we can more easily merge the data files using E-Merge. This document shows you how to perform step 1 using a convenient function in R (instead of doing it manually) To perform this first step, you can use the copy_raw() function from the workflow package I developed. Open the research study’s RProject file (.Rproj) Use workflow::copy_raw() You can just copy and paste from the examples below. But for your information, the arguments you can specify for this function are: from: a directory where the task folders for a single session are located (e.g. “Tasks/Session 1”) to: a directory where raw data files are to be copied to (e.g. “Data Files/subj”) filetype: a string pattern identifying a specific type of raw data file (e.g. “.edat”) remove: An optional argument that takes TRUE/FALSE values. FALSE is equivalent to copy/paste and is the default. TRUE will delete the files after copying them (this would be done only after data collection) subj.file: A file path to a list of subjects who completed the entire study (optional; and would only be specified after data collection; e.g. “Data Files/subj_completed.csv”) ext: a directory extension within the [Task Name] folder to save raw data files to (this is mainly for eye-tracking data; e.g. “idf”) 1.1 Before Finishing Data Collection In situations where data collection has not finished, you do not need to worry about removing subjects that did not complete all sessions. And this organization is more temporary so we will want to just copy/paste the files, not remove them. To copy and paste the .edat files from a Session folder type into the console: workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/subj&quot;, filetype = &quot;.edat&quot;) Note that you should be able to just copy and paste this line of code directly into R. In order to copy and paste files from another Session folder, just replace Session 1 with the name of another Session folder (e.g. Session 2) To copy and paste Eye-Tracking data files from a Session folder type into the console: workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;.idf&quot;, ext = &quot;idf&quot;) workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;AccuracyImage&quot;, ext = &quot;idf&quot;) workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;TrackingMonitorImage&quot;, ext = &quot;idf&quot;) These three lines of code copy over three types of Eye-Tracking files. 1.2 After Data Collection In situations where data collection has finished, you will need to separate files for subjects that did complete all Sessions and subjects that did not. We will also want to just perform a Move and not Copy and Paste. This is a tedious process if done manually. We can just use workflow::copy_raw() to do this for us. However, we do need to create a certain file before we can use workflow::copy_raw(). This file only contains a column of Subject #’s that completed all sessions. I suggest creating this file based on the Database on the Control Room Computer. Put the Subject #’s in an Excel document and save it as a comma separative value file, subjlist_final.csv to Data Files/ Then type into the console: workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/subj&quot;, filetype = &quot;.edat&quot;, remove = TRUE, subj.file = &quot;Data Files/subjlist_final.csv&quot;) For Eye-Tracking files: workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;.idf&quot;, ext = &quot;idf&quot;, remove = TRUE, subj.file = &quot;Data Files/subjlist_final.csv&quot;) workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;AccuracyImage&quot;, ext = &quot;idf&quot;, remove = TRUE, subj.file = &quot;Data Files/subjlist_final.csv&quot;) workflow::copy_raw(from = &quot;Tasks/Session 1&quot;, to = &quot;Data Files/Eye-Tracking&quot;, filetype = &quot;TrackingMonitorImage&quot;, ext = &quot;idf&quot;, remove = TRUE, subj.file = &quot;Data Files/subjlist_final.csv&quot;) "],
["merge.html", "2 Merge", " 2 Merge The Four Data Preparation Steps Organize the raw data files. This involves moving the raw .edat files from Tasks/Session #/#. Task/data to Data Files/edat/Task/. Merge the individual .edat files into a single task.emrg file using E-Merge Export the task.emrg file to a task.txt file so we can process the data in R Source the 0_task_raw.R Scripts E-Prime will create an .edat data file for each subject per task. This results in a lot of separate individual files. We need to merge these files together so that we have one merged file per task. We can use the E-Merge software program to do so. The second step in data preparation is to merge the individual .edat files into a single .emrg file. The .edat data files are located in the directory: Data Files/edat/[Task Name] You need to save the merged data files in the directory: Data Files/E-Merge In the left window pane, navigate to the directory in Dropbox: Data Files/edat/[Task Name] Click on the [Task Name] folder. This should populate the right window pane with .edat files Select all the files (Hold down the SHIFT key to highlight over multiple files) Click on Merge in the toolbar above Select Standard Merge Save the new merged data file to Data Files/E-Merge with the same name as the [Task Name] folder It will ask you if you are sure you want to create this new file. Select Yes Get a Graduate Student or PostDoc if an error message occurs’ Move on to the next [Task Name] folder The directory tree in the left window pane may have disappeared. To make it reappear, adjust the horizontal size of the window panes by moving your mouse cursor to the divider between the left and right window panes. "],
["export.html", "3 Export", " 3 Export The Four Data Preparation Steps Organize the raw data files. This involves moving the raw .edat files from Tasks/Session #/#. Task/data to Data Files/edat/Task/. Merge the individual .edat files into a single task.emrg file using E-Merge Export the task.emrg file to a task.txt file so we can process the data in R Source the 0_task_raw.R Scripts The third step in the data preparation stage is to Export the .emrg to a .txt file so it can be imported into R. This step is real easy: Open an E-Merged data file in Data Files/E-Merge Go to File -&gt; Export… Change the following options Unicode: Uncheck Select Okay Save to the same location as the E-Merged data file: Data Files/E-Merge Save with the same filename as the E-Merge file "],
["source-r-scripts.html", "4 Source R Scripts 4.1 Creating R Scripts 4.2 Using the masterscript.R", " 4 Source R Scripts The Four Data Preparation Steps Organize the raw data files. This involves moving the raw .edat files from Tasks/Session #/#. Task/data to Data Files/edat/Task/. Merge the individual .edat files into a single task.emrg file using E-Merge Export the task.emrg file to a task.txt file so we can process the data in R Source the 0_task_raw.R Scripts The final data preparation step is to Source the 0_task_raw.R scripts. These scripts convert the messy task.txt files to tidy task_raw.csv files. 4.1 Creating R Scripts There should be a template R Script in the directory R Scripts/templates. If not you can download a template by typing into the console: workflow::template(rawscript = TRUE) To understand more about this template R Script see Chapter 9.2.1 in the UseR Guide. To learn how to create an R Script for this step see the Data Preparation section of the UseR Guide. 4.2 Using the masterscript.R It may be the case that ALL the R Scripts have been created and all you need to do is source() them all. You can do this easily in the file masterscript.R If there is not a mastersrcipt file then you can download one by typing into the console: workflow::template(masterscript = &quot;data preparation&quot;) To understand more about the masterscript see Chapter 9.2.2 in the UseR Guide The masterscript for data preparation is simple and looks something like: ## Data Preparation for StudyName ############################################# #------ 0. &quot;messy&quot; to &quot;tidy&quot; raw data ------# ############################################# library(here) source(here(&quot;R Scripts&quot;, &quot;0_taskname_raw.R&quot;), echo=TRUE) rm(list=ls()) ############################################# For each task there should be an R Script file - 0_taskname_raw.R For each of these R Script files there should be a line in the masterscript to source() that file. Note: source() or Sourcing means to execute all lines of code in a file. In the masterscript we are using the here() function. To learn more about the here() function see Chapter 8.3.1 in the UseR Guide. If there is not a line in the masterscript to source() an R Script file then you should most likely add it. Finally, you can run each line of code in the masterscript, one at a time. Running them run at a time makes it easier to catch any errors that might come up. Start at the first line of code: library(here) and press Ctrl+Enter Wait for that line of code to finish running, then press Ctrl+Enter (The cursor should have automatically moved to the next line). If there were any errors you can feel free to try and troubleshoot. Otherwise get a graduate student or PostDoc to help out. "],
["pupil-data.html", "5 Pupil Data 5.1 Using BeGaze", " 5 Pupil Data There are a few extra Data Preparation steps required for pupil data. After completing Step 1 of data preparation follow these instructions. These instructions replace Steps 2 and 3. The eyetracker will create several data files that we need to import into BeGaze analysis software and export as a .txt file. The following data files are created by the eyetracker .idf - this file contains the actual gaze and pupil data AccuracyImage.bmp - An image file TrackingMonitorImage.bmp - An image file .idf_images - These files will look like folders. We do not need to import these files These files are located in the directory: Data Files/Eye-Tracking/[Task Name]/idf We will export the raw sample.txt files to: Data Files/Eye-Tracking/[Task Name] 5.1 Using BeGaze Open data files in BeGaze File -&gt; Manual Experiment Creation Experiment Name: PupilData Go to the Gaze Data tab: Add files… -&gt; Sort by Data -&gt; select the .idf files you want (not .idf_images) -&gt; Open Check if any subject files have a different recording frequency (Hz) or different calibration screen resolution (e.g. [860,720]) -Select those subject files and click “Remove Files” On the computer in the idf folder, move all the files associated with those subjects to a “recording error” folder: Data Files/Eye-Tracking/[Task Name]/idf/recording error Check that all subjects have the same recording frequency (Hz) and calibration screen resolution. Go to Stimulus Images tab: Add Files… -&gt; Sort by Date -&gt; select the AccuracyImage.bmp and TrackingMonitorIMage.bmp files you want (not .idf_images) Go to Event Detection tab: Set Event Detection to: High Speed Set the following parameters: 22 40% 50 ms 20% 80% Select Create Experiment Convert .idf files to .txt files Export -&gt; Legacy: Export Raw Data to File… The following fields should be selected (Fields with an * are the most important) Raw Data: Pupil Diameter Pupil Diameter [mm] * Channel: Left Eye * Right Eye * Points of Regard (POR): Gaze Position * Quality Values Eye Position Gaze Vector Misc. Data: Messages * Event Info * Stimulus Stimulus Conditions Select Details tab Select Write header Decimal places: 4 Separator: Tab Export Location: NEEDS TO BE SPECIFIED!! Browse: Data Files/Eye-Tracking/[Task Name] Select Single file output Select Export Go to File -&gt; Close Experiment Got to File -&gt; Delete Experiment from Data Base Delete PupilData Experiment "]
]
